rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Private profiles keyed by Firebase Auth UID
    match /profiles/{uid} {
      allow read, update, delete: if request.auth != null && request.auth.uid == uid;
      allow create: if request.auth != null
                    && request.auth.uid == uid
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.email is string
                    && request.resource.data.email.matches('^u\\d{7}@student\\.cuet\\.ac\\.bd$')
                    && request.resource.data.studentId is string
                    && request.resource.data.studentId.matches('^\\d{7}$');
    }

    // Public profiles keyed by studentId (7 digits)
    match /publicProfiles/{studentId} {
      allow read: if true; // anyone can read public profile fields
      allow create, update, delete: if request.auth != null
        && studentId.matches('^\\d{7}$')
        && request.auth.token.email is string
        && request.auth.token.email.matches('^u' + studentId + '@student\\.cuet\\.ac\\.bd$')
        && request.resource.data.keys().hasOnly(['studentId','name','nickname','home','school','college','bloodGroup','bio','updatedAt'])
        && request.resource.data.studentId == studentId
        && request.resource.data.name is string
        && request.resource.data.studentId is string
        && (request.resource.data.nickname == null || request.resource.data.nickname is string)
        && (request.resource.data.home == null || request.resource.data.home is string)
        && (request.resource.data.school == null || request.resource.data.school is string)
        && (request.resource.data.college == null || request.resource.data.college is string)
        && (request.resource.data.bloodGroup == null || (
             request.resource.data.bloodGroup is string &&
             request.resource.data.bloodGroup.matches('^(A|B|AB|O)[+-]$')
           ))
        && (request.resource.data.bio == null || request.resource.data.bio is string);
    }

    // Facebook links keyed by studentId
    match /fbLinksById/{studentId} {
      allow read: if true; // public to read links
      allow create, update, delete: if request.auth != null
        && studentId.matches('^\\d{7}$')
        && request.auth.token.email is string
        && request.auth.token.email.matches('^u' + studentId + '@student\\.cuet\\.ac\\.bd$')
        && request.resource.data.keys().hasOnly(['link','updatedAt'])
        && (request.resource.data.link == null || request.resource.data.link is string);
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}